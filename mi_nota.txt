
/**
 * En lugar de asignar directamente el evento click al botón, ahora asignamos el evento
 * click al contenedor (en este caso, el body).
 * Luego, verificamos si el evento click ocurrió en el botón con id "click" dentro del evento delegado.
 * En resumen, este código permite detectar y manejar los clics
 * en el botón con ID "click" dentro del botón contenedor.
 */

let buttonContainer = document.body;

buttonContainer.addEventListener("click", (event) => {
  if (event.target.id === "click") {
    console.log("Hay Click");
  }
});






let bodyHTML = document.body;
bodyHTML.addEventListener("click", (event) => {
  event.preventDefault();
  const submitButton = document.querySelector(".custom-form__send-submit");
  console.log(event.target);
  if (event.target === submitButton) {
    console.log("siiii");
    sendForm();
  }
});


addEventListener("DOMContentLoaded", (event) => {
  console.log("Documento cargado OK");
});

cuando se envia el formulario aqui:
@app.route('/procesar-form-chat', methods=['POST'])
no es necesario colocar un if y else ya que puedo asigna el valor vacio si no llega 


1. 'mensaje_chat' cuando se envia un mensaje
2. 'user_desconectado' se emite cuando el usuario se desconecta
3. 'nueva_cuenta_creada' se emite cuando una cuenta es creada
5. 'total_mensaje_sin_leer' cuando se envia un mensaje a un usuario automaticamente
   entra en un estado de no leido y Luego de ser leido ccambia su estado

     document.addEventListener("DOMContentLoaded", function () {
        $("html, body").animate({ scrollTop: $("body").offset().top }, 200);
      });


       ||

`${hola}`

def lista_amigos_chat(id_user_session):
    try:
        with connectionBD() as conexion_MySQLdb:
            with conexion_MySQLdb.cursor(dictionary=True) as mycursor:
                querySQL = f"""
                   SELECT 
                        u.id_user,
                        u.user,
                        u.email_user,
                        u.foto_user,
                        u.online,
                        max(c.fecha_mensaje) Fecha,
                        CASE WHEN c.estatus_leido = 0 THEN COUNT(c.estatus_leido) ELSE 0 END AS total_mensajes_sin_leer
                    FROM tbl_users u
                    LEFT JOIN tbl_chat c ON u.id_user = c.para_id_user
                    WHERE
                    u.id_user != %s
                    GROUP BY u.id_user, u.user, u.email_user, u.foto_user, u.online, c.estatus_leido
                    ORDER BY Fecha DESC;
                """
                mycursor.execute(querySQL, (id_user_session,))
                # print(querySQL)
                # print(id_user_session, id_user_session)
                lista_amigos_chats = mycursor.fetchall()
                return lista_amigos_chats

    except Exception as e:
        print(f"Ocurrió un error listando la lista de amigos/chat: {e}")
        return []




import re

def convert_links_to_html(text):
    # Patrón para encontrar enlaces en el texto
    link_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'

    # Usamos re.sub para reemplazar los enlaces encontrados en el texto
    text_converted = re.sub(link_pattern, r'<a href="\g<0>">\g<0></a>', text)

    return text_converted

text = "Los módulos exportados están en strict mode tanto si se declaran así como si no. https://www.google.com La sentencia export no puede ser utilizada en scripts embebidos."

text_with_links = convert_links_to_html(text)
print(text_with_links)
